#!/usr/bin/env python

import logging
import threading
import time
import random
import os

from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    ConversationHandler,
    CallbackContext,
)

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

logger = logging.getLogger(__name__)

UNDER_CONSTURCTION = f'–°–æ—Ä—è–Ω, —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üôè'
TOKEN = os.getenv("TOKEN", "<INSERT TELEGRAM BOT TOKEN>")


def time_has_come(user, update, context):
    rt = random.randint(600, 60000)
    time.sleep(rt)

    update.message.reply_text(
        f"–ù—É —á—Ç–æ –∂! –í—Ä–µ–º—è –Ω–∞—Å—Ç–∞–ª–æ! –¢—ã –∂–¥–∞–ª —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ —Ü–µ–ª—ã—Ö {rt} —Å–µ–∫—É–Ω–¥! ‚åõ",
        reply_markup=ReplyKeyboardMarkup(
            main_keyboard, one_time_keyboard=True, input_field_placeholder=''
        )
    )


def when_time_comes(user, update: Update, context: CallbackContext):
    update.message.reply_text(
        f"–Ø –Ω–∞–ø–∏—à—É —Ç–µ–±–µ, –∫–æ–≥–¥–∞ –Ω–∞—Å—Ç–∞–Ω–µ—Ç –≤—Ä–µ–º—è! ‚åõ"
    )

    threading.Thread(target=time_has_come, args=(
        user, update, context), ).start()


def start(user, update: Update, context: CallbackContext):
    user['text_input'] = True
    user['tasks'] = []

    reply_keyboard = [[commands["ALL_TASKS"]["text"]]]
    update.message.reply_text(
        f'–ü—Ä–∏—Å—ã–ª–∞–π –º–Ω–µ —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ-–æ–¥–Ω–æ–π. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "‚úÖ –≠—Ç–æ –≤—Å–µ –∑–∞–¥–∞—á–∏"',
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=True, input_field_placeholder=''
        ),
    )


def start_collect_task(user, update: Update, context: CallbackContext):
    user["current_task"] = commands["START_WORK"]
    text = update.message.text
    user['tasks'].append(text)

    reply_keyboard = [[commands["ALL_TASKS"]["text"]]]
    update.message.reply_text(
        f'–ü—Ä–∏—Å—ã–ª–∞–π –º–Ω–µ —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ-–æ–¥–Ω–æ–π. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "‚úÖ –≠—Ç–æ –≤—Å–µ –∑–∞–¥–∞—á–∏".\n–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n' +
        "\n".join(user['tasks']),
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=True, input_field_placeholder='–í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:'
        ),
    )


def all_tasks(user, update: Update, context: CallbackContext):
    user["current_task"] = commands["ALL_TASKS"]
    user['text_input'] = True

    if len(user['tasks']) == 0:
        update.message.reply_text("–ü—Ä–∏–¥—É–º–∞–π —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–¥–∞—á—É!")
        start_collect_task(user, update, context)
    else:
        arr = []
        tasks = []
        for i in range(0, len(user['tasks'])):
            arr.append(f"{i}")
            tasks.append(f"{i}. {user['tasks'][i]}")

        reply_keyboard = [arr]
        update.message.reply_text(
            f"–ü–æ–¥—É–º–∞–π –∏ –≤—ã–±–µ—Ä–∏ –≥–ª–∞–≤–Ω—É—é –∑–∞–¥–∞—á—É —Å –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –Ω–∞—á–Ω—ë—à—å:\n" +
            "\n".join(tasks),
            reply_markup=ReplyKeyboardMarkup(
                reply_keyboard, one_time_keyboard=True, input_field_placeholder=''
            ),
        )


def start_from_task_number(user, update: Update, context: CallbackContext):
    try:
        text = update.message.text
        task_id = int(text)
        task = user["tasks"][task_id]
        user["task"] = task

        reply_keyboard = [[commands["MUSIC_ON"]["text"]]]
        update.message.reply_text(
            f"–ù–∞ –±–ª–∏–∂–∞–π—à–∏–µ 25 –º–∏–Ω—É—Ç —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ - {task}. –ù–∞–¥–µ—å –Ω–∞—É—à–Ω–∏–∫–∏ –∏ –≤–∫–ª—é—á–∏ —Ä–∞–±–æ—á—É—é –º—É–∑—ã–∫—É üéßüéµ",
            reply_markup=ReplyKeyboardMarkup(
                reply_keyboard, one_time_keyboard=True, input_field_placeholder=''
            ),
        )
    except Exception as e:
        all_tasks(user, update, context)


def music_on(user, update: Update, context: CallbackContext):
    reply_keyboard = [[commands["TOOLS_OPEN"]["text"]]]
    update.message.reply_text(
        f"–û—Ç–∫—Ä–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (Miro, IDE, Jira, Confluence, Word –∏ —Ç.–ø.) üìÇüñ•",
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=True, input_field_placeholder=''
        )
    )


def run_in_25(user, update: Update, context: CallbackContext):
    time.sleep(25 * 60)

    update.message.reply_text(
        f"‚åõ –ü—Ä–æ—à–ª–æ 25 –º–∏–Ω—É—Ç —Å —Ç–µ—Ö –ø–æ—Ä, –∫–∞–∫ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –Ω–∞–¥ –∑–∞–¥–∞—á–µ–π {user['task']}! –ù–∞–¥–µ—é—Å—å, —Ç–µ–±–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å! –ï—Å–ª–∏ –¥–∞, —Ç–æ —Ç—ã –º–æ–ª–æ–¥–µ—Ü!",
        reply_markup=ReplyKeyboardMarkup(
            main_keyboard, one_time_keyboard=True, input_field_placeholder=''
        )
    )


def tools_opened(user, update: Update, context: CallbackContext):
    update.message.reply_text(
        f"–û—Ç–ª–∏—á–Ω–æ! –ü–æ—Å—Ç–∞—Ä–∞–π—Å—è –Ω–µ –æ—Ç–≤–ª–µ–∫–∞—Ç—å—Å—è 25 –º–∏–Ω—É—Ç. –Ø —Ç–µ–±–µ –Ω–∞–ø–∏—à—É, –∫–æ–≥–¥–∞ –≤—Ä–µ–º—è –ø—Ä–æ–π–¥–µ—Ç! ‚åõ"
    )

    threading.Thread(target=run_in_25, args=(user, update, context), ).start()


commands = {
    "WHEN_TIME_COMES": {"text": "–ö–æ–≥–¥–∞ –Ω–∞—Å—Ç—É–ø–∏—Ç –≤—Ä–µ–º—è ‚è±", "cmd": when_time_comes},
    "START_WORK": {"text": "–ü–æ–º–æ–≥–∏ –º–Ω–µ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å üôè", "cmd": start, "text_input": start_collect_task},
    "ALL_TASKS": {"text": "‚úÖ –≠—Ç–æ –≤—Å–µ –∑–∞–¥–∞—á–∏", "cmd": all_tasks, "text_input": start_from_task_number},
    "MUSIC_ON": {"text": "–í–∫–ª—é—á–∏–ª! üéßüéµ", "cmd": music_on},
    "TOOLS_OPEN": {"text": "–û—Ç–∫—Ä—ã–ª! üìÇüñ•", "cmd": tools_opened}
}

userdata = {}
main_keyboard = [[commands["START_WORK"]["text"]],
                 [commands["WHEN_TIME_COMES"]["text"]]]


def message(update: Update, context: CallbackContext) -> None:
    if update and update.message and update.message.from_user and update.message.from_user.id:
        id = update.message.from_user.id
        user = userdata.get(id, {})
        userdata[id] = user
        text = update.message.text

        cmd_found = False

        for name in commands:
            cmd = commands[name]
            if cmd["text"] == text:
                cmd_found = True
                if cmd["cmd"]:
                    user["current_task"] = cmd
                    cmd["cmd"](user, update, context)

        if not cmd_found and user.get('text_input', False) and user.get('current_task', {}).get("text_input"):
            cmd_found = True
            user['current_task']['text_input'](user, update, context)

        if not cmd_found:
            update.message.reply_text(
                f'–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?',
                reply_markup=ReplyKeyboardMarkup(
                    main_keyboard, one_time_keyboard=True, input_field_placeholder=''
                ),
            )


def main() -> None:
    updater = Updater(TOKEN)

    # Get the dispatcher to register handlers
    dispatcher = updater.dispatcher
    dispatcher.add_handler(MessageHandler(
        Filters.text & ~Filters.command, message))

    # Start the Bot
    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
